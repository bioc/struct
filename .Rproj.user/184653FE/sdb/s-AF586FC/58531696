{
    "collab_server" : "",
    "contents" : "#####################################\n###### parameter class generics #####\n#####################################\n\n#' get/set parameters for an object\n#'\n#' @param obj a model or iterator object from the *struct* class\n#' @param name name of parameter as a string\n#' @param value a valid value for the parameter being set\n#' @rdname param\n#' @family parameter functions\n#' @export\nsetGeneric(\"param.obj\",function(obj,name)standardGeneric(\"param.obj\"))\n\n#' @rdname param\n#' @export\nsetGeneric(\"param.obj<-\",function(obj,name,value)standardGeneric(\"param.obj<-\"))\n\n#' verify paramater name\n#'\n#' verify that the name of a paramater is valid for an object\n#' @param obj a model or iterator object from the *struct* class\n#' @param name name of parameter as a string\n#' @return TRUE if parameter name is valid, FALSE if not\n#' @family parameter functions\n#' @export\nsetGeneric(\"is.param\",function(obj,name)standardGeneric(\"is.param\"))\n\n#' parameter identifiers\n#'\n#' return a list of valid parameter ids for an object\n#' @param obj a model or iterator object from the *struct* class\n#' @return list of parameter ids\n#' @family parameter functions\n#' @export\nsetGeneric(\"param.ids\",function(obj)standardGeneric(\"param.ids\"))\n\n#' parameter name\n#'\n#' return a the name for a paramater, if available\n#' @param obj a model or iterator object from the *struct* class\n#' @return name of parameter\n#' @family parameter functions\n#' @export\nsetGeneric(\"param.name\",function(obj,name)standardGeneric(\"param.name\"))\n\n#' parameter list\n#'\n#' get/set a named list of parameters and thier current value for an object\n#' @param obj a model or iterator object from the *struct* class\n#' @param value a named list, where the name-value pairs should match valid parameters for the object\n#' @return list of parameter names\n#' @family parameter functions\n#' @rdname param.list\n#' @export\nsetGeneric(\"param.list\",function(obj)standardGeneric(\"param.list\"))\n\n#' @rdname param.list\n#' @export\nsetGeneric(\"param.list<-\",function(obj,value)standardGeneric(\"param.list<-\"))\n\n#' parameter values\n#'\n#' get/set the values for a parameter.\n#' @param obj a model or iterator object from the *struct* class\n#' @param name of a parameter\n#' @return value of output\n#' @family parameter functions\n#' @rdname param.value\n#' @export\nsetGeneric(\"param.value\",function(obj,name)standardGeneric(\"param.value\"))\n\n#' @rdname param.value\n#' @export\nsetGeneric(\"param.value<-\",function(obj,name,idx,value)standardGeneric(\"param.value<-\"))\n\n#####################################\n###### output class generics #####\n#####################################\n\n#' output identifiers\n#'\n#' return a list of valid output ids for an object\n#' @param obj a model or iterator object from the *struct* class\n#' @return list of output ids\n#' @family output functions\n#' @export\nsetGeneric(\"output.ids\",function(obj)standardGeneric(\"output.ids\"))\n\n#' output values\n#'\n#' get/set the values for an output.\n#' @param obj a model or iterator object from the *struct* class\n#' @param name of an output\n#' @return value of output\n#' @family output functions\n#' @rdname output.value\n#' @export\nsetGeneric(\"output.value\",function(obj,name)standardGeneric(\"output.value\"))\n\n#' @rdname output.value\n#' @export\nsetGeneric(\"output.value<-\",function(obj,name,value)standardGeneric(\"output.value<-\"))\n\n#' get/set outputs for an object\n#'\n#' @param obj a model or iterator object from the *struct* class\n#' @param name name of output as a string\n#' @rdname outputs\n#' @family output functions\n#' @export\nsetGeneric(\"output.obj\",function(obj,name)standardGeneric(\"output.obj\"))\n\n#' @export\n#' @param value a valid value for the parameter being set\n#' @rdname outputs\n#' @family output functions\nsetGeneric(\"output.obj<-\",function(obj,name,value)standardGeneric(\"output.obj<-\"))\n\n#' verify output name\n#'\n#' verify that the name of an output is valid for an object\n#' @param obj a model or iterator object from the *struct* class\n#' @param name name of the output as a string\n#' @return TRUE if output name is valid, FALSE if not\n#' @family output functions\n#' @export\nsetGeneric(\"is.output\",function(obj,name)standardGeneric(\"is.output\"))\n\n#' output names\n#'\n#' return a list of valid parameter names for an object\n#' @param obj a model or iterator object from the *struct* class\n#' @return list of parameter names\n#' @family parameter functions\n#' @export\nsetGeneric(\"output.name\",function(obj,name)standardGeneric(\"output.name\"))\n\n#' output list\n#'\n#' get a named list of outputs and thier current value for an object\n#' @param obj a model or iterator object from the *struct* class\n#' @param value a named list of outputs for an object\n#' @return list of output names\n#' @family output functions\n#' @rdname output.list\n#' @export\nsetGeneric(\"output.list\",function(obj)standardGeneric(\"output.list\"))\n\n#' @rdname output.list\n#' @export\nsetGeneric(\"output.list<-\",function(obj,value)standardGeneric(\"output.list<-\"))\n\n#####################################\n###### chart class generics #####\n#####################################\n\n#' chart names\n#'\n#' return a list of valid parameter names for an object\n#' @param obj a model or iterator object from the *struct* class\n#' @return list of chart names\n#' @family chart functions\n#' @export\nsetGeneric(\"chart.name\",function(obj,name)standardGeneric(\"chart.name\"))\n\n#' plot a chart\n#'\n#' @param obj a model or iterator object from the *struct* class\n#' @param name name of chart to plot\n#' @param opt list of options for this chart\n#' @rdname chart.plot\n#' @family chart functions\n#' @export\nsetGeneric(\"chart.plot\",function(obj,name,opt=NULL)standardGeneric(\"chart.plot\"))\n\n#' valid chart names for an object\n#'\n#' @param obj a model or iterator object from the *struct* class\n#' @param name name of chart to plot\n#' @rdname chart.ids\n#' @family chart functions\n#' @export\nsetGeneric(\"chart.ids\",function(obj)standardGeneric(\"chart.ids\"))\n\n#' verify chart name\n#'\n#' verify that the name of chart is valid for an object\n#' @param obj a model or iterator object from the *struct* class\n#' @param name name of the chart as a string\n#' @return TRUE if chart name is valid, FALSE if not\n#' @family chart functions\n#' @export\nsetGeneric(\"is.chart\",function(obj,name)standardGeneric(\"is.chart\"))\n\n#' get/set the options for a chart\n#'\n#' @param obj a model or iterator object from the *struct* class\n#' @param name name of chart to plot\n#' @param opt list of options for this chart\n#' @rdname chart.opt\n#' @family chart functions\n#' @export\nsetGeneric(\"chart.opt\",function(obj,name)standardGeneric(\"chart.opt\"))\n\n#' @rdname chart.opt\n#' @export\nsetGeneric(\"chart.opt<-\",function(obj,name,value)standardGeneric(\"chart.opt<-\"))\n\n#' get/set chart object\n#'\n#' @param obj a model or iterator object from the *struct* class\n#' @param name name of chart to plot\n#' @rdname chart.obj\n#' @family chart functions\n#' @export\nsetGeneric(\"chart.obj\",function(obj,name)standardGeneric(\"chart.obj\"))\n\n#' @rdname chart.obj\n#' @export\nsetGeneric(\"chart.obj<-\",function(obj,name,value)standardGeneric(\"chart.obj<-\"))\n\n\n#####################################\n###### struct class generics #####\n#####################################\n\n#' get/set type for an object\n#'\n#' @param obj an object from the \\pkg{struct} class\n#' @param value a valid type string\n#' @rdname type\n#' @family struct_class functions\n#' @export\nsetGeneric(\"type\",function(obj)standardGeneric(\"type\"))\n\n#' @export\n#' @rdname type\nsetGeneric(\"type<-\",function(obj,value)standardGeneric(\"type<-\"))\n\n#' get/set name for an object\n#'\n#' @param obj an object from the \\pkg{struct} class\n#' @param value a valid string\n#' @rdname name\n#' @family struct_class functions\n#' @export\nsetGeneric(\"name\",function(obj)standardGeneric(\"name\"))\n\n#' @export\n#' @rdname name\nsetGeneric(\"name<-\",function(obj,value)standardGeneric(\"name<-\"))\n\n#' get/set description for an object\n#'\n#' @param obj an object from the \\pkg{struct} class\n#' @param value a valid string\n#' @rdname desc\n#' @family struct_class functions\n#' @export\nsetGeneric(\"description\",function(obj)standardGeneric(\"description\"))\n\n#' @export\n#' @rdname desc\nsetGeneric(\"description<-\",function(obj,value)standardGeneric(\"description<-\"))\n\n#################################\n###### model class generics #####\n#################################\n\n#' Train a model\n#'\n#' Trains a model using the input dataset\n#' @param model a model object\n#' @param data a dataset object\n#' @family model functions\n#' @rdname train\n#' @export\nsetGeneric(\"train\",function(M,D)standardGeneric(\"train\"))\n\n#' Apply a (trained) model to a dataset D to get a prediction\n#'\n#' Apply a model using the input dataset. Requires that the model is trained first.\n#' @param model a model object\n#' @param data a dataset object\n#' @family model functions\n#' @rdname predict\n#' @export\nsetGeneric(\"predict\",function(M,D)standardGeneric(\"predict\"))\n\n#' get/set output name as prediction output for a model\n#'\n#' get/set the prediction output for a model. This determines which outputs from this model are supplied as inputs to the next model when used in a model.list\n#' @param M a model object\n#' @param value name of an output for this model\n#' @family model functions\n#' @rdname predicted.name\n#' @export\nsetGeneric(\"predicted.name\",function(M)standardGeneric(\"predicted.name\"))\n\n#' @export\nsetGeneric(\"predicted.name<-\",function(M,value)standardGeneric(\"predicted.name<-\"))\n\n#' prediction output for a model\n#'\n#' returns the prediction output for a model. This is supplied as input to the next model when used in a model.list\n#' @param model a model object\n#' @family model functions\n#' @rdname predicted\n#' @export\nsetGeneric(\"predicted\",function(M)standardGeneric(\"predicted\"))\n\n######################################\n###### model.list class generics #####\n######################################\n\n#' Get/set models of a model.list\n#'\n#' Returns the list of models in a model.list object\n#' @param ML a model.list object\n#' @param value a list containing only model objects\n#' @family model.list functions\n#' @rdname models\n#' @export\nsetGeneric(\"models\",function(ML)standardGeneric(\"models\"))\n\n#' @export\n#' @rdname models\nsetGeneric(\"models<-\",function(ML,value)standardGeneric(\"models<-\"))\n\n###################################\n###### dataset class generics #####\n###################################\n\n#' get/set data for a dataset object\n#'\n#' @param obj a type object from the *struct* class\n#' @param value a data.frame of raw data\n#' @rdname data\n#' @family dataset functions\n#' @export\nsetGeneric(\"data\",function(obj)standardGeneric(\"data\"))\n\n#' @export\n#' @rdname data\nsetGeneric(\"data<-\",function(obj,value)standardGeneric(\"data<-\"))\n\n#' get/set sample meta data for a dataset object\n#'\n#' @param obj a type object from the *struct* class\n#' @param value a data.frame of meta data\n#' @rdname sample.meta\n#' @family dataset functions\n#' @export\nsetGeneric(\"sample.meta\",function(obj)standardGeneric(\"sample.meta\"))\n\n#' @export\n#' @rdname sample.meta\nsetGeneric(\"sample.meta<-\",function(obj,value)standardGeneric(\"sample.meta<-\"))\n\n#' get/set variable meta data for a dataset object\n#'\n#' @param obj a type object from the *struct* class\n#' @param value a data.frame of meta data\n#' @rdname variable.meta\n#' @family dataset functions\n#' @export\nsetGeneric(\"variable.meta\",function(obj)standardGeneric(\"variable.meta\"))\n\n#' @export\n#' @rdname variable.meta\nsetGeneric(\"variable.meta<-\",function(obj,value)standardGeneric(\"variable.meta<-\"))\n\n####################################\n###### iterator class generics #####\n####################################\n\n#' run an iterator object\n#'\n#' @param I an iterator object\n#' @param D a dataset object\n#' @param MET a metric object\n#' @rdname iterator\n#' @family iterator functions\n#' @export\nsetGeneric(\"run\",function(I,D,MET)standardGeneric(\"run\"))\n\n#' evaluate an iterator object\n#'\n#' @rdname iterator\n#' @family iterator functions\n#' @export\nsetGeneric(\"evaluate\",function(I,MET)standardGeneric(\"evaluate\"))\n\n#' get/set output name as prediction output for a model\n#'\n#' get/set the prediction output for a model. This determines which outputs from this model are supplied as inputs to the next model when used in a model.list\n#' @param M an iterator object\n#' @param value name of an output for iterator M\n#' @family iterator functions\n#' @rdname result.name\n#' @export\nsetGeneric(\"result.name\",function(M)standardGeneric(\"result.name\"))\n\n#' @export\nsetGeneric(\"result.name<-\",function(M,value)standardGeneric(\"result.name<-\"))\n\n#' results output for an iterator\n#'\n#' returns the results of an iterator. This is used to control model flow.\n#' @param M an iterator object\n#' @family iterator functions\n#' @rdname result\n#' @export\nsetGeneric(\"result\",function(M)standardGeneric(\"result\"))\n\n####################################\n###### metric class generics #####\n####################################\n\n#' calculate a metric\n#'\n#' @param MET a metric object\n#' @param Y = sample meta data e.g. of test data\n#' @param Yhat = predicted meta data after applying model to test data\n#' @rdname metric\n#' @family metric functions\n#' @export\nsetGeneric(\"calculate\",function(MET,Y,Yhat)standardGeneric(\"calculate\"))\n\n#' get the value for a metric\n#'\n#' @return value the calculated value of a metric\n#' @rdname metric\n#' @family metric functions\n#' @export\nsetGeneric(\"value\",function(MET)standardGeneric(\"value\"))\n\n#' @export\n#' @rdname metric\nsetGeneric(\"value<-\",function(obj,value)standardGeneric(\"value<-\"))\n\n####################################\n###### stato class generics #####\n####################################\n\n#' get the stato.id for an object\n#'\n#' @return id the stato id\n#' @rdname stato\n#' @family stato functions\n#' @export\nsetGeneric(\"stato.id\",function(obj)standardGeneric(\"stato.id\"))\n\n#' get the stato name for an object\n#'\n#' @return name the stato name\n#' @rdname stato\n#' @family stato functions\n#' @export\nsetGeneric(\"stato.name\",function(obj)standardGeneric(\"stato.name\"))\n\n#' get the stato name for an object\n#'\n#' @return def the stato description\n#' @rdname stato\n#' @family stato functions\n#' @export\nsetGeneric(\"stato.definition\",function(obj)standardGeneric(\"stato.definition\"))\n\n#' display a stato summary of the object\n#'\n#' @rdname stato\n#' @family stato functions\n#' @export\nsetGeneric(\"stato.summary\",function(obj)standardGeneric(\"stato.summary\"))\n\n#' get a pdf of a stato object\n#'\n#' @rdname stato\n#' @family stato functions\n#' @export\nsetGeneric(\"stato.pdf\",function(obj,outpath,filename,outformat)standardGeneric(\"stato.pdf\"))\n",
    "created" : 1532004602848.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "608947883",
    "id" : "58531696",
    "lastKnownWriteTime" : 1532008468,
    "last_content_update" : 1532008468598,
    "path" : "~/GitHub/struct/R/generics.R",
    "project_path" : "R/generics.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}