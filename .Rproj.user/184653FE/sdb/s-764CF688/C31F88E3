{
    "collab_server" : "",
    "contents" : "#' chartable_class\n#'\n#' A base class in the \\pkg{struct} package. Provides several fundamental methods for charting and should not be called directly.\n#' @export chartable_class\n#' @include generics.R struct_class.R\n#'\nchartable_class<-setClass(\n  \"chartable_class\",\n  slots=c('charts'=\"character\"\n  )\n)\n\n\n#' @export\nsetMethod(f=\"chart.obj\",\n          signature=c(\"chartable_class\",\"character\"),\n          definition=function(obj,name)\n          {\n            value=slot(obj, paste(\"charts\",name,sep='.'))\n            return(value)\n          }\n)\n\n#' @export\nsetMethod(f=\"chart.obj<-\",\n          signature=c(\"chartable_class\",\"character\"),\n          definition=function(obj,name,value)\n          {\n            slot(obj, paste(\"charts\",name,sep='.'))=value\n            return(obj)\n          }\n)\n\n\nsetMethod(f=\"chart.plot\",\n          signature=\"chartable_class\",\n          definition=function(obj,name,opt=NULL)\n          {\n            c=chart(obj,name)\n            if (is(c,'function'))\n            {\n              out=c(obj,opt)\n            }\n            if (is(c,'chart') | is(c,'chart.stato'))\n            {\n              out=c@fcn(obj,opt)\n            }\n            return(out)\n          }\n)\n\nsetMethod(f=\"chart.ids\",\n          signature=\"chartable_class\",\n          definition=function(obj)\n          {\n            return(obj@charts)\n          }\n)\n\n#' @export\nsetMethod(f=\"chart.name\",\n          signature=c(\"chartable_class\",'character'),\n          definition=function(obj,name)\n          {\n            p=slot(obj, paste(\"charts\",name,sep='.'))\n            # if a chart object then get its name\n            if (is(p,'chart'))\n            {\n              value=name(p)\n            }\n            else\n            {\n              # otherwise just return the slot name\n              value=slot(obj, paste(\"charts\",name,sep='.'))\n            }\n            return(value)\n          }\n)\n\nsetMethod(f=\"chart.opt\",\n          signature=\"chartable_class\",\n          definition=function(obj,name)\n          {\n            return(obj@charts.opt[[name]])\n          }\n)\n\nsetMethod(f=\"chart.opt<-\",\n          signature=c(\"chartable_class\",'character'),\n          definition=function(obj,name,value)\n          {\n            obj@charts.opt[[name]]<-value\n            return(obj)\n          }\n)\n\nsetMethod(f=\"is.chart\",\n          signature=c(\"chartable_class\"),\n          definition=function(obj,name)\n          {\n            valid=obj@charts\n            if (name %in% valid)\n            {\n              return(TRUE)\n            }\n            else\n            {\n              stop('\"', name, '\" is not valid chart for an object of class \"', class(obj)[1],'\"')\n            }\n          }\n)\n\n",
    "created" : 1532419670514.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1634229611",
    "id" : "C31F88E3",
    "lastKnownWriteTime" : 1531823735,
    "last_content_update" : 1531823735,
    "path" : "~/GitHub/struct/R/chartable_class.R",
    "project_path" : "R/chartable_class.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}