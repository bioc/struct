{
    "collab_server" : "",
    "contents" : "\n\ndataset_boxplot_fcn=function(obj,opt) {\n\n  # assume obj is a dataset object\n  # get data\n  Xt=data(obj)\n  # column name\n  varn=opt$feature_to_plot\n  # get requested column\n  Xt=Xt[[opt$feature_to_plot]]\n  # meta data\n  SM=sample.meta(obj)[ ,1]\n\n  # remove NA\n  SM=SM[!is.na(Xt)]\n  Xt=Xt[!is.na(Xt)]\n\n  # count number of values\n  L=levels(SM)\n  count=numeric(length(L))\n  for (i in 1:length(L)) {\n    count[i]=sum(SM==L[i])\n  }\n\n  # get color pallete using pmp\n  clrs=pmp::createClassAndColors(class = SM)\n  SM=clrs$class\n\n  #prep the plot\n  temp=data.frame(x=SM,y=Xt)\n  p<-ggplot(temp, aes(x, y, color=x)) +\n    geom_boxplot() +\n    xlab(NULL) +\n    ylab(varn) +\n    ggtitle(varn) +\n    scale_colour_manual(values=clrs$manual_colors,name=opt$factor_name) +\n    theme_Publication(base_size = 12) +\n    theme(legend.position=\"none\")\n\n  if (opt$show_counts) {\n    newlabels=as.character(count)\n    newlabels=paste0(as.character(L),'\\n(n = ',newlabels,')')\n    p=p+scale_x_discrete(labels=newlabels)\n  }\n\n  if (opt$label_outliers) {\n    outliers=numeric()\n    for (l in L) {\n      IN=which(SM==l)\n      outliers=c(outliers,IN[which( Xt[IN]>(quantile(Xt[IN], 0.75) + 1.5*IQR(Xt[IN]))) ] )\n      outliers=c(outliers,IN[which( Xt[IN]<(quantile(Xt[IN], 0.25) - 1.5*IQR(Xt[IN]))) ] )\n    }\n    outlier_df=temp[outliers,]\n    outlier_df$out_label=paste0('  ',rownames(data(obj)))[outliers]\n    p=p+geom_text(data=outlier_df,aes(group=x,color=x,label=out_label),hjust='left')\n  }\n\n  return(p)\n}\n\n\nmissing_value_histogram=function(obj,opt) {\n\n  # assume obj is a dataset object\n\n  # get data\n  Xt=data(obj)\n  # meta data\n  SM=sample.meta(obj)[ ,1]\n\n  if (opt$by_sample)\n  {\n    # count NS per sample\n    count=apply(Xt,1,function(x) {sum(is.na(x))/length(x)*100})\n    txt='Missing values per sample'\n  } else {\n    # count NS per feature\n    count=apply(Xt,2,function(x) {sum(is.na(x))/length(x)*100})\n    txt='Missing values per feature'\n  }\n\n  A=data.frame(x=count)\n  p=ggplot (data=A, aes(x)) + geom_histogram()+\n    xlab (\"missing values, %\")+ ggtitle(txt)+\n    xlim (0,100)+\n    scale_colour_Publication()+ theme_Publication(base_size = 12)\n\n  return(p)\n}\n\nmissing_value_boxplot=function(obj,opt) {\n\n  # assume obj is a dataset object\n\n  # get data\n  Xt=data(obj)\n  # meta data\n  SM=sample.meta(obj)[ ,1]\n\n  L=levels(SM)\n\n\n\n\n  if (opt$by_sample)\n  {\n    # count NS per sample\n    count=apply(Xt,1,function(x) {sum(is.na(x))/length(x)*100})\n    result=matrix(0,nrow=nrow(Xt),ncol=2)\n    result[,1]=count\n    result[,2]=SM\n    txt='Missing values per sample'\n    # get color pallete using pmp\n    clrs=pmp::createClassAndColors(class = SM)\n    A=data.frame(x=clrs$class,y=result[,1])\n  } else {\n    for (i in 1:length(L)) {\n      # count NS per sample\n      count=apply(Xt[SM==L[i],,drop=FALSE],2,function(x) {sum(is.na(x))/sum(SM==L[i])*100})\n      temp=data.frame(y=count,x=L[i])\n      if (i==1) {\n        result=temp\n      } else {\n        result=rbind(result,temp)\n      }\n    }\n      txt='Missing values per feature'\n      # get color pallete using pmp\n      clrs=pmp::createClassAndColors(class = as.factor(result$x))\n      A=data.frame(x=clrs$class,y=result$y)\n  }\n\n\n  p=ggplot (data=A, aes(x, y, color=x)) +\n    geom_boxplot() +\n     ggtitle(txt) +\n    xlab(NULL) +\n    ylim (0,100)+\n    scale_colour_manual(values=clrs$manual_colors,name=opt$factor_name) +\n    theme_Publication(base_size = 12) +\n    ylab (\"missing values, %\") +\n    coord_flip()\n  return(p)\n}\n",
    "created" : 1532423619803.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1204666020",
    "id" : "ECC1743B",
    "lastKnownWriteTime" : 1532610485,
    "last_content_update" : 1532610485861,
    "path" : "~/GitHub/struct/R/dataset_chart_fcns.R",
    "project_path" : "R/dataset_chart_fcns.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}