library(struct)
statoOntology=new.env()
path.to.ontology=file.path(path.package('struct'),'/extdata/stato-reasoned.obo')
assign('ont',ontologyIndex::get_ontology(path.to.ontology,extract_tags = 'everything'),envir=statoOntology)
library(struct)
path.to.ontology=file.path(path.package('struct'),'/extdata/stato-reasoned.obo')
assign('ont',ontologyIndex::get_ontology(path.to.ontology,extract_tags = 'everything'),envir=statoOntology)
statoOntology$ont$comment
statoOntology$ont$domain$`OBI:0000938`
library(BiocCheck)
source("https://bioconductor.org/biocLite.R")
biocLite("BiocCheck")
library('BiocCheck')
BiocCheck('struct')
BiocCheck('C:\Users\lloydgr\Documents\GitHub\struct')
BiocCheck('C:/Users/lloydgr/Documents/GitHub/struct')
?methods
BiocCheck('C:/Users/lloydgr/Documents/GitHub/struct')
BiocCheck('C:/Users/lloydgr/Documents/GitHub/struct')
install.packages("R.matlab")
library(R.matlab)
X=readMat(P:/data/varshavd/Mike/Mike_corals_workspace.mat)
X=readMat('P:/data/varshavd/Mike/Mike_corals_workspace.mat')
matlab_ws_name='Corals.1d'
matlab_ws_name='Corals.1d'
pqnstr=paste0(matlab_ws_name,'.ex.bin.comp.pqn')
PQN=X[pqnstr]
PQN$Corals.1d.ex.bin.comp.pqn
PQN=X[[pqnstr]]
PQN$data
class(PQN=X[[pqnstr]]$data)
class(X[[pqnstr]]$data)
PQN=as.data.frame(X[[pqnstr]]$data)
PQN
X[[pqnstr]]$axisscale
rn=X[[pqnstr]]$labels[[1]]
rn=X[[pqnstr]]$labels[[2]]
rn=X[[pqnstr]]$labels
X[[pqnstr]]
rn=X[[pqnstr]]
rn=X[[pqnstr]]$labels[[3]]
rn=X[[pqnstr]]$labels[3]
rn=X[[pqnstr]]
rn=X[[pqnstr]]$label[3]
rn=X[[pqnstr]]$label[2]
rn=X[[pqnstr]]$label[[2]]
rn=delist(rn)
rn=unlist(rn)
rn=unlist(X[[pqnstr]]$label[2])
# set the relevant matrices
pqnstr=paste0(matlab_ws_name,'.ex.bin.comp.pqn')
PQN=as.data.frame(X[[pqnstr]]$data)
glogstr=paste0(matlab_ws_name,'.ex.bin.comp.pqn.glog')
GLOG=as.data.frame(X[[pqnstr]]$data)
rn=unlist(X[[pqnstr]]$label[2])
colnames(PQN)=rn
colnames(GLOG)=rn
View(GLOG)
path2matlab='P:/data/varshavd/Mike/Mike_Coral.mat'
# read in the matlab data
X=readMat(path2matlab)
# set the relevant matrices
pqnstr=paste0(matlab_ws_name,'.ex.bin.comp.pqn')
PQN=as.data.frame(X[[pqnstr]]$data)
glogstr=paste0(matlab_ws_name,'.ex.bin.comp.pqn.glog')
GLOG=as.data.frame(X[[pqnstr]]$data)
# get the row and column names
rn=unlist(X[[pqnstr]]$label[2])
colnames(PQN)=rn
colnames(GLOG)=rn
rn=unlist(X[[pqnstr]]$label[1])
rn=unlist(X[[pqnstr]]$class[1])
rn=unlist(X[[pqnstr]]$class[2])
rn=unlist(X[[pqnstr]]$class)
X[[pqnstr]]$class
X[[glogstr]]$class
X[[glogstr]]$class[1]
rn=unlist(X[[glogstr]]$class[1])
rn=unlist(X[[pqnstr]]$label[1])
rownamws(PQN)=rn
rownames(PQN)=rn
rn=unlist(X[[glogstr]]$label[1])
SMETA=data.frame(group=rn)
View(SMETA)
rn=unlist(X[[glogstr]]$class[1])
SMETA=data.frame(group=rn)
SMETA=data.frame(group=rn)
rownames(SMETA)=rownames(GLOG)
View(SMETA)
source('C:/Users/lloydgr/Desktop/stats/stats_config.R')
install.packages("lazyeval")
source('C:/Users/lloydgr/Desktop/stats/stats_config.R')
source('C:/Users/lloydgr/Desktop/stats/stats_config.R')
install.packages("ggplot2")
install.packages("stringi")
source('C:/Users/lloydgr/Desktop/stats/stats_config.R')
library(devtools)
install("//its-rds/2015/viantm-01/resources/software/data_analysis/statistics_workflows/packages/pmp-master_d68cc45/pmp")
install.packages("randomForest")
install("//its-rds/2015/viantm-01/resources/software/data_analysis/statistics_workflows/packages/pmp-master_d68cc45/pmp")
source('C:/Users/lloydgr/Desktop/stats/stats_config.R')
SM
source('C:/Users/lloydgr/Desktop/stats/stats_config.R')
source(file.path(path2packages,"nmr_matlab_to_excel.R"))
source(file.path(path2packages,'univariate_loop.R'))
rm('X')
dir.create(file.path(main_path,InternalProjectRef,'results/data_analysis',Assay,'uncorrected','multivariate'))
source(file.path(path2packages,"nmr_matlab_to_excel.R"))
source(file.path(path2packages,'univariate_loop.R'))
View(COUNT)
View(y)
View(UNIX)
COUNT=filter_features_by_n_per_group(UNIXt,y,2)
View(COUNT)
!COUNT$rej
COUNT$rej
View(filter_features_by_n_per_group)
X=UNIXt
N=2
# search the data for number of groups present per feature
n=numeric()
k=nlevels(y[,1])
for (i in 1:ncol(X))
{
temp=y[!is.na(X[,i]),,drop=FALSE]
temp=droplevels(temp)
n[i]=nlevels(temp[,1])
}
# make a table with removed features because absent from a group, and indicate which groups are missing
filtered=data.frame('vars'=colnames(X))
levs=levels(y[,1])
COUNT=as.data.frame(matrix(0,ncol(X),k))
rownames(COUNT)<-colnames(X)
colnames(COUNT)<-levs
View(COUNT)
i=1
temp=y[!is.na(X[,i]),]
temp=droplevels(temp)
temp_lvls=levels(temp)
j=1
sum(temp==temp_lvls[j])
temp_lvls[j]
temp
y
temp=y[!is.na(X[,i]),,drop=FALSE]
source('C:/Users/lloydgr/Desktop/stats/stats_config.R')
rm(list=ls())
##### BASIC CONFIG #####
# Clear your environment
rm(list=ls())
# set to TRUE if using NMR data. FALSE for DIMS LCMS.
ISNMR=TRUE
############## DIMS / LCMS ONLY ##################################
# path to PQN tsv file for univariate stats (RDS or local computer)
path2pqn='Y:/resources/software/data_analysis/statistics_workflows/example_datasets/DIMS/Galaxy1476-[Normalisation_on_data_1475_and_data_1409__Peak_intensity_matrix]pol_pos.tsv'
# path to glog tsv file for multivariate stats (RDS or local computer)
path2glog='Y:/resources/software/data_analysis/statistics_workflows/example_datasets/DIMS/Galaxy1478-[G-log_transformaton_on_data_1475_and_data_1477__Peak_intensity_matrix]pol_pos.tsv'
# path to sample meta data (RDS or local computer)
path2smeta='Y:/resources/software/data_analysis/statistics_workflows/example_datasets/DIMS/Galaxy1144-[Replicate_Filter_on_data_1139__Sample_Metadata_(NoB)].tsv'
####################################################################
############### NMR ONLY ########################
# path to saved matlab workspace using pmgui (NMR ONLY)
path2matlab='P:/data/varshavd/Mike/Mike_Coral.mat'
# name of dataset in workspace (NMR ONLY) NB replace _ with .
matlab_ws_name='Corals.1d'
# name of matlab workspace item that has the meta data added using PLS toolbox (bin,pqn,glog) (NMR ONLY)
meta_suffix='glog'
#################################################
# path to create a new results folder in (RDS or local computer)
main_path='C:/Users/lloydgr/Desktop/stats'
InternalProjectRef='Mike_coral'
Assay='NMR'
study_name='TEST'
factor_name='group' # column name of meta data to use
qc_column='group' # column containing QC labels (often the same as the factor_name column)
cols2plot=c('group')
coltype=c('factor')
filter_by_groups=c('1','2','3','4','5','6') # groups to include (including QC).
factor_to_filter='group'
studyname='all_classes'
## univariate tests
# valid options are "ttest", "wilcoxon", "anova", "kruskal"
tesC=c("anova", "kruskal")
## FDR correction
# valid options are "fdr", "none"
adjC=c("fdr", "none")
# other factors to plot (should be column names of meta data)
other_factors=c('group')
# path to save reports (rds or local computer)
reportfolder='C:/Users/lloydgr/Desktop/stats/reports'
DO_UNIVARIATE=TRUE     # true/false to produce univariate results
DO_MULTIVARIATE=TRUE   # true/false to produce multivariate results
DO_REPORT=TRUE         # true/false to produce report. NB uni AND multi should have been run first.
##### END OF BASIC CONFIG #####
####### ADVANCED CONFIG #######
rename_factor=NULL # rename a factor c(from,to)
add_factor=FALSE # run a bespoke bit of code to add a factor
factor_name2=NULL # second column to use as a factor (2-way only)
subject_col=NULL # column of subject ID (paired data only)
## use corrected or uncorrected for each assay (set 'uncorrected' for DIMS and NMR)
dataset='uncorrected'
## sheets for analysis
excelsheet_univariate='pqn_normalised'
excelsheet_multivariate='glog'
metasheet='sample_meta'
factor_to_relable=NULL
relabel_groups=matrix(0,nrow=0,ncol=2)
analysis_folder='data_analysis'
extra_components=list(c(3,4)) # list of pairs of components to plot
HAS_PMID=FALSE # set to FALSE is PMID outputs are not available (e.g. DIMS, NMR)
DRIVE_LETTER = "Q" # DRIVE THE GROUP RDS IS MAPPED
COMMIT_ID = "9eb5193"
path2packages=paste(DRIVE_LETTER, ':/resources/software/data_analysis/statistics_workflows/packages/statistics-report_', COMMIT_ID, '/source/', sep="") # DON'T CHANGE THIS!
####### END OF ADVANCED CONFIG #######
if (ISNMR)
{
source(file.path(path2packages,"nmr_matlab_to_excel.R"))
} else
{
# assume galaxy output
source(file.path(path2packages,"galaxy_to_excel.R"))
}
source('C:/Users/lloydgr/Desktop/stats/stats_config.R')
library(openxlsx)
library(R.matlab)
# create the folder structure
dir.create(file.path(main_path,InternalProjectRef,'results')) # results folder
dir.create(file.path(main_path,InternalProjectRef,'results/data_analysis'))
dir.create(file.path(main_path,InternalProjectRef,'results/data_analysis',Assay))
dir.create(file.path(main_path,InternalProjectRef,'results/data_analysis',Assay,'uncorrected'))
dir.create(file.path(main_path,InternalProjectRef,'results/data_analysis',Assay,'uncorrected','univariate'))
dir.create(file.path(main_path,InternalProjectRef,'results/data_analysis',Assay,'uncorrected','univariate',studyname))
dir.create(file.path(main_path,InternalProjectRef,'results/data_analysis',Assay,'uncorrected','multivariate'))
dir.create(file.path(main_path,InternalProjectRef,'results/data_analysis',Assay,'uncorrected','multivariate',studyname))
# gets path for sourced script
scriptPath <- function() {
getSrcDirectory(scriptPath);
}
source_path=scriptPath()
# use zip provided with packages
if (.Platform$OS.type=="windows")
{
zippath <- file.path(source_path,"zip.exe")
Sys.setenv("R_ZIPCMD"=zippath)
}
# read in the matlab data
X=readMat(path2matlab)
# set the relevant matrices
pqnstr=paste0(matlab_ws_name,'.ex.bin.comp.pqn')
PQN=as.data.frame(X[[pqnstr]]$data)
glogstr=paste0(matlab_ws_name,'.ex.bin.comp.pqn.glog')
GLOG=as.data.frame(X[[pqnstr]]$data)
# transpose for excel
PQN=t(PQN)
GLOG=t(GLOG)
# read in the matlab data
X=readMat(path2matlab)
# set the relevant matrices
pqnstr=paste0(matlab_ws_name,'.ex.bin.comp.pqn')
PQN=X[[pqnstr]]$data
glogstr=paste0(matlab_ws_name,'.ex.bin.comp.pqn.glog')
GLOG=X[[pqnstr]]$data
# transpose for excel
PQN=as.data.frame(t(PQN))
GLOG=as.data.frame(t(GLOG))
# get the row and column names
rn=unlist(X[[pqnstr]]$label[2])
rownames(PQN)=rn
rownames(GLOG)=rn
# rn=unlist(X[[glogstr]]$label[1])
# row(PQN)=rn
# rownames(GLOG)=rn
# build the metadata
rn=unlist(X[[glogstr]]$class[1])
SMETA=data.frame(group=rn,run_order=1:length(rn))
rownames(SMETA)=colnames(GLOG)
View(GLOG)
View(SMETA)
source('C:/Users/lloydgr/Desktop/stats/stats_config.R')
source('C:/Users/lloydgr/Desktop/stats/stats_config.R')
?polyroot
FS=forward_selection(Xt,Y,A)
MVAToolbox
gauss_intersect=function(m1,m2,s1,s2)
{
#https://stackoverflow.com/questions/22579434/python-finding-the-intersection-point-of-two-gaussian-curves
a=(1/(2*s1*s1))-(1/(2*s2*s2))
b=(m2/(s2*s2)) - (m1/(s1*s1))
c=((m1*m1) / (2*s1*s1)) - ((m2*m2)/(2*s2*s2)) - log(s2/s1)
return(polyroot(c(c,b,a))) # in reverse order vs numpy.roots
}
gauss_intersect(1,1,1,1)
gauss_intersect(2,1,1,1)
gauss_intersect(2,4,1,1)
gauss_intersect(2,4,5,1)
gauss_intersect(2,4,5,20)
gauss_intersect(2,4,5,5)
gauss_intersect(2,2,5,5)
gauss_intersect(2,4,5,5)
gauss_intersect(2,-4,5,5)
gauss_intersect(2,4,-5,5)
gauss_intersect(2,4,NA,5)
gauss_intersect(2,4,Inf,5)
max(c(NA,1))
max(c(NA,1),na.rm = TRUE)
mean(NA)
mean(NA,rm.na=TRUE)
mean(c(NA,1),rm.na=TRUE)
mean(c(NA,1))
mean(c(NA,1),na.rm = TRUE)
install("//its-rds/2015/viantm-01/resources/software/data_analysis/statistics_workflows/packages/mva-toolbox-master_6f0d09e")
install("//its-rds/2015/viantm-01/resources/software/data_analysis/statistics_workflows/packages/mva-toolbox-master_6f0d09e")
source('C:/Users/lloydgr/Desktop/stats/stats_config.R')
