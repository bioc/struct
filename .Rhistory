X=UNIXt
N=2
# search the data for number of groups present per feature
n=numeric()
k=nlevels(y[,1])
for (i in 1:ncol(X))
{
temp=y[!is.na(X[,i]),,drop=FALSE]
temp=droplevels(temp)
n[i]=nlevels(temp[,1])
}
# make a table with removed features because absent from a group, and indicate which groups are missing
filtered=data.frame('vars'=colnames(X))
levs=levels(y[,1])
COUNT=as.data.frame(matrix(0,ncol(X),k))
rownames(COUNT)<-colnames(X)
colnames(COUNT)<-levs
View(COUNT)
i=1
temp=y[!is.na(X[,i]),]
temp=droplevels(temp)
temp_lvls=levels(temp)
j=1
sum(temp==temp_lvls[j])
temp_lvls[j]
temp
y
temp=y[!is.na(X[,i]),,drop=FALSE]
source('C:/Users/lloydgr/Desktop/stats/stats_config.R')
rm(list=ls())
##### BASIC CONFIG #####
# Clear your environment
rm(list=ls())
# set to TRUE if using NMR data. FALSE for DIMS LCMS.
ISNMR=TRUE
############## DIMS / LCMS ONLY ##################################
# path to PQN tsv file for univariate stats (RDS or local computer)
path2pqn='Y:/resources/software/data_analysis/statistics_workflows/example_datasets/DIMS/Galaxy1476-[Normalisation_on_data_1475_and_data_1409__Peak_intensity_matrix]pol_pos.tsv'
# path to glog tsv file for multivariate stats (RDS or local computer)
path2glog='Y:/resources/software/data_analysis/statistics_workflows/example_datasets/DIMS/Galaxy1478-[G-log_transformaton_on_data_1475_and_data_1477__Peak_intensity_matrix]pol_pos.tsv'
# path to sample meta data (RDS or local computer)
path2smeta='Y:/resources/software/data_analysis/statistics_workflows/example_datasets/DIMS/Galaxy1144-[Replicate_Filter_on_data_1139__Sample_Metadata_(NoB)].tsv'
####################################################################
############### NMR ONLY ########################
# path to saved matlab workspace using pmgui (NMR ONLY)
path2matlab='P:/data/varshavd/Mike/Mike_Coral.mat'
# name of dataset in workspace (NMR ONLY) NB replace _ with .
matlab_ws_name='Corals.1d'
# name of matlab workspace item that has the meta data added using PLS toolbox (bin,pqn,glog) (NMR ONLY)
meta_suffix='glog'
#################################################
# path to create a new results folder in (RDS or local computer)
main_path='C:/Users/lloydgr/Desktop/stats'
InternalProjectRef='Mike_coral'
Assay='NMR'
study_name='TEST'
factor_name='group' # column name of meta data to use
qc_column='group' # column containing QC labels (often the same as the factor_name column)
cols2plot=c('group')
coltype=c('factor')
filter_by_groups=c('1','2','3','4','5','6') # groups to include (including QC).
factor_to_filter='group'
studyname='all_classes'
## univariate tests
# valid options are "ttest", "wilcoxon", "anova", "kruskal"
tesC=c("anova", "kruskal")
## FDR correction
# valid options are "fdr", "none"
adjC=c("fdr", "none")
# other factors to plot (should be column names of meta data)
other_factors=c('group')
# path to save reports (rds or local computer)
reportfolder='C:/Users/lloydgr/Desktop/stats/reports'
DO_UNIVARIATE=TRUE     # true/false to produce univariate results
DO_MULTIVARIATE=TRUE   # true/false to produce multivariate results
DO_REPORT=TRUE         # true/false to produce report. NB uni AND multi should have been run first.
##### END OF BASIC CONFIG #####
####### ADVANCED CONFIG #######
rename_factor=NULL # rename a factor c(from,to)
add_factor=FALSE # run a bespoke bit of code to add a factor
factor_name2=NULL # second column to use as a factor (2-way only)
subject_col=NULL # column of subject ID (paired data only)
## use corrected or uncorrected for each assay (set 'uncorrected' for DIMS and NMR)
dataset='uncorrected'
## sheets for analysis
excelsheet_univariate='pqn_normalised'
excelsheet_multivariate='glog'
metasheet='sample_meta'
factor_to_relable=NULL
relabel_groups=matrix(0,nrow=0,ncol=2)
analysis_folder='data_analysis'
extra_components=list(c(3,4)) # list of pairs of components to plot
HAS_PMID=FALSE # set to FALSE is PMID outputs are not available (e.g. DIMS, NMR)
DRIVE_LETTER = "Q" # DRIVE THE GROUP RDS IS MAPPED
COMMIT_ID = "9eb5193"
path2packages=paste(DRIVE_LETTER, ':/resources/software/data_analysis/statistics_workflows/packages/statistics-report_', COMMIT_ID, '/source/', sep="") # DON'T CHANGE THIS!
####### END OF ADVANCED CONFIG #######
if (ISNMR)
{
source(file.path(path2packages,"nmr_matlab_to_excel.R"))
} else
{
# assume galaxy output
source(file.path(path2packages,"galaxy_to_excel.R"))
}
source('C:/Users/lloydgr/Desktop/stats/stats_config.R')
library(openxlsx)
library(R.matlab)
# create the folder structure
dir.create(file.path(main_path,InternalProjectRef,'results')) # results folder
dir.create(file.path(main_path,InternalProjectRef,'results/data_analysis'))
dir.create(file.path(main_path,InternalProjectRef,'results/data_analysis',Assay))
dir.create(file.path(main_path,InternalProjectRef,'results/data_analysis',Assay,'uncorrected'))
dir.create(file.path(main_path,InternalProjectRef,'results/data_analysis',Assay,'uncorrected','univariate'))
dir.create(file.path(main_path,InternalProjectRef,'results/data_analysis',Assay,'uncorrected','univariate',studyname))
dir.create(file.path(main_path,InternalProjectRef,'results/data_analysis',Assay,'uncorrected','multivariate'))
dir.create(file.path(main_path,InternalProjectRef,'results/data_analysis',Assay,'uncorrected','multivariate',studyname))
# gets path for sourced script
scriptPath <- function() {
getSrcDirectory(scriptPath);
}
source_path=scriptPath()
# use zip provided with packages
if (.Platform$OS.type=="windows")
{
zippath <- file.path(source_path,"zip.exe")
Sys.setenv("R_ZIPCMD"=zippath)
}
# read in the matlab data
X=readMat(path2matlab)
# set the relevant matrices
pqnstr=paste0(matlab_ws_name,'.ex.bin.comp.pqn')
PQN=as.data.frame(X[[pqnstr]]$data)
glogstr=paste0(matlab_ws_name,'.ex.bin.comp.pqn.glog')
GLOG=as.data.frame(X[[pqnstr]]$data)
# transpose for excel
PQN=t(PQN)
GLOG=t(GLOG)
# read in the matlab data
X=readMat(path2matlab)
# set the relevant matrices
pqnstr=paste0(matlab_ws_name,'.ex.bin.comp.pqn')
PQN=X[[pqnstr]]$data
glogstr=paste0(matlab_ws_name,'.ex.bin.comp.pqn.glog')
GLOG=X[[pqnstr]]$data
# transpose for excel
PQN=as.data.frame(t(PQN))
GLOG=as.data.frame(t(GLOG))
# get the row and column names
rn=unlist(X[[pqnstr]]$label[2])
rownames(PQN)=rn
rownames(GLOG)=rn
# rn=unlist(X[[glogstr]]$label[1])
# row(PQN)=rn
# rownames(GLOG)=rn
# build the metadata
rn=unlist(X[[glogstr]]$class[1])
SMETA=data.frame(group=rn,run_order=1:length(rn))
rownames(SMETA)=colnames(GLOG)
View(GLOG)
View(SMETA)
source('C:/Users/lloydgr/Desktop/stats/stats_config.R')
source('C:/Users/lloydgr/Desktop/stats/stats_config.R')
?polyroot
FS=forward_selection(Xt,Y,A)
MVAToolbox
gauss_intersect=function(m1,m2,s1,s2)
{
#https://stackoverflow.com/questions/22579434/python-finding-the-intersection-point-of-two-gaussian-curves
a=(1/(2*s1*s1))-(1/(2*s2*s2))
b=(m2/(s2*s2)) - (m1/(s1*s1))
c=((m1*m1) / (2*s1*s1)) - ((m2*m2)/(2*s2*s2)) - log(s2/s1)
return(polyroot(c(c,b,a))) # in reverse order vs numpy.roots
}
gauss_intersect(1,1,1,1)
gauss_intersect(2,1,1,1)
gauss_intersect(2,4,1,1)
gauss_intersect(2,4,5,1)
gauss_intersect(2,4,5,20)
gauss_intersect(2,4,5,5)
gauss_intersect(2,2,5,5)
gauss_intersect(2,4,5,5)
gauss_intersect(2,-4,5,5)
gauss_intersect(2,4,-5,5)
gauss_intersect(2,4,NA,5)
gauss_intersect(2,4,Inf,5)
max(c(NA,1))
max(c(NA,1),na.rm = TRUE)
mean(NA)
mean(NA,rm.na=TRUE)
mean(c(NA,1),rm.na=TRUE)
mean(c(NA,1))
mean(c(NA,1),na.rm = TRUE)
install("//its-rds/2015/viantm-01/resources/software/data_analysis/statistics_workflows/packages/mva-toolbox-master_6f0d09e")
install("//its-rds/2015/viantm-01/resources/software/data_analysis/statistics_workflows/packages/mva-toolbox-master_6f0d09e")
source('C:/Users/lloydgr/Desktop/stats/stats_config.R')
library(struct)
?setMethod
setGeneric('predict')
# S3 predict method
predict.model=function(x,D)
{
return(x)
}
predict
rm(list=ls())
predict
detach("package:struct",unload=TRUE)
predict
isGeneric("predict")
formals('predict')
#' model class
#'
#' A class for models that can be trained/applied to datasets e.g. PCA, PLS etc.
#' Also used for preprocessing steps that require application to test sets.
#' not intended to be called directly, this class should be inherited to provide functionality for method-specific classes.
#' @export model
#' @include generics.R  parameter_class.R output_class.R chartable_class.R dataset_class.R
model<-setClass(
"model",
contains = c('struct_class','parameter_class','outputs_class','chartable_class'),
slots=c(type='character',
predicted='character',
stato.id='character'
)
)
#' @describeIn model train the model using input data
#' @export
setMethod(f="train",
signature=c("model","dataset"),
definition=function(M,D)
{
return(M)
}
)
# S3 predict method
predict.model=function(object,...)
{
return(object)
}
#' @describeIn model apply the model to input data
#' @export
setMethod(f="predict",
signature=c("model"),
definition=predict.model
)
#' @describeIn model get prediction output from model
#' @export
setMethod(f='predicted',
signature=c('model'),
definition=function(M)
{
return(output.value(M,predicted.name(M)))
}
)
#' @describeIn model get prediction output name for model
#' @export
setMethod(f='predicted.name',
signature=c('model'),
definition=function(M)
{
return(M@predicted)
}
)
#' @describeIn model set prediction output from model
#' @export
setMethod(f='predicted.name<-',
signature=c('model','character'),
definition=function(M,value)
{
M@predicted=value
return(M)
}
)
formals("predict")
getGeneric('predict')
library(struct)
?predict.lm
predict.lm
library(struct)
library(struct)
library(struct)
?predict.model
library(struct)
?predict.model
predict.model
library(struct)
?predict.model
?predict
?`predict.model
''
?predict.model
library(struct)
?predict
library(struct)
?predict
?predict.model
>model
?model
library(struct)
library(struct)
library(struct)
?model
?train
>predit
?predict
?`predict.model
?predict.model
library(struct)
?predict
?predict
library(struct)
library(struct)
?predict
library(struct)
?predict
?predict.model
library(struct)
class(M)
library(struct)
r=sample.int(nrow(xd),nrow(xd))
install.packages("roxygen2")
devtools::use_testthat()
library('testhat')
install.packages("testthat")
library('testhat')
library('testthat')
library('struct')
chart.stato()
charts.boxplot=chart.stato(name='box and whisker plot',
description='Boxplots showing the range of observed values for feature, separated by group.',
type='boxplot',
fcn=dataset_boxplot,
opt=list(label_outliers=TRUE, # label outliers
feature_to_plot='V1',   #  feature to plot by label
factor_name='factor',   # name of factor to appear on legend
groups=factor(), # factor of groups
feature_labels=character(), # feature labels
sample_labels=character() # sample labels,
),
stato.id='STATO:0000243')
charts.boxplot=chart.stato(name='box and whisker plot',
description='Boxplots showing the range of observed values for feature, separated by group.',
type='boxplot',
opt=list(label_outliers=TRUE, # label outliers
feature_to_plot='V1',   #  feature to plot by label
factor_name='factor',   # name of factor to appear on legend
groups=factor(), # factor of groups
feature_labels=character(), # feature labels
sample_labels=character() # sample labels,
),
stato.id='STATO:0000243')
charts.boxplot
library(struct)
library(struct)
library(struct)
pmp
library(pmp)
createClassAndColors()
createClassAndColors(y)
y=sample.meta(D)
?createClassAndColors
library(struct)
co=chart.obj(D,'scores')
library(struct)
library(struct)
detach('package:structtools',unload=TRUE)
library(struct)
library(struct)
library(struct)
# column name
varn=colnames(Xt)[[opt$feature_to_plot]]
# meta data
SM=sample.meta(D)[ ,1]
# get color pallete using pmp
clrs=pmp::createClassAndColors(class = SM)
SM=clrs$class
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
c(c(1,2,3),c(4,5,6))
' ' + 'hello'
library(struct)
library(struct)
install.packages("ggrepel")
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
?boxplot
?boxplot
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
# assume obj is a dataset object
# get data
Xt=data(obj)
# column name
varn=opt$feature_to_plot
# get requested column
Xt=Xt[[opt$feature_to_plot]]
# meta data
SM=sample.meta(obj)[ ,1]
# get color pallete using pmp
clrs=pmp::createClassAndColors(class = SM)
SM=clrs$class
#prep the plot
temp=data.frame(x=SM,y=Xt)
# remove NA
temp=temp[-is.na(Xt),]
temp=data.frame(x=SM,y=Xt)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
levels(numeric(3))
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
result=matrix(0,nrow=0,ncol=2)
result
library(struct)
library(struct)
library(struct)
library(struct)
clrs=pmp::createClassAndColors(class = SM)
A=data.frame(x=clrs$class,y=result[,1])
p=ggplot (data=A, aes(x, y, color=x)) +
geom_boxplot() +
xlab ("missing values, %")+ ggtitle(txt) +
xlim (0,100)+
theme_Publication(base_size = 12) +
scale_colour_manual(values=clrs$manual_colors,name=opt$factor_name)
class(A[,1])
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
library(struct)
print(system("git rev-parse --short HEAD", intern = TRUE))
print(system("git rev-parse --short C:/Users/lloydgr/Documents/GitHub/statistics-report/HEAD", intern = TRUE))
print(system("git rev-parse --short HEAD", intern = TRUE))
readLines("C:/Users/lloydgr/Documents/GitHub/statistics-report/.git/refs/heads/master")
readLines("C:/Users/lloydgr/Documents/GitHub/statistics-report/.git/refs/heads/master")[1:7]
readLines("C:/Users/lloydgr/Documents/GitHub/statistics-report/.git/refs/heads/master")[1][1:7]
readLines("C:/Users/lloydgr/Documents/GitHub/statistics-report/.git/refs/heads/master")[[1]][1:7]
readLines("C:/Users/lloydgr/Documents/GitHub/statistics-report/.git/refs/heads/master")[1]
readLines("C:/Users/lloydgr/Documents/GitHub/statistics-report/.git/refs/heads/master")
IN=readLines("C:/Users/lloydgr/Documents/GitHub/statistics-report/.git/refs/heads/master")
substr(readLines("C:/Users/lloydgr/Documents/GitHub/statistics-report/.git/refs/heads/master"),1,7)
?method
