% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parameter_class.R
\docType{class}
\name{parameter_class-class}
\alias{parameter_class-class}
\alias{parameter_class}
\alias{param_obj,parameter_class,character-method}
\alias{param_obj<-,parameter_class,character-method}
\alias{is_param,parameter_class-method}
\alias{param_ids,parameter_class-method}
\alias{param_name,parameter_class,character-method}
\alias{param_list,parameter_class-method}
\alias{param_list<-,parameter_class,list-method}
\alias{param_value,parameter_class,character-method}
\alias{$,parameter_class-method}
\alias{param_value<-,parameter_class,character-method}
\alias{$<-,parameter_class-method}
\title{parameter_class}
\usage{
\S4method{param_obj}{parameter_class,character}(obj, name)

\S4method{param_obj}{parameter_class,character}(obj, name) <- value

\S4method{is_param}{parameter_class}(obj, name)

\S4method{param_ids}{parameter_class}(obj)

\S4method{param_name}{parameter_class,character}(obj, name)

\S4method{param_list}{parameter_class}(obj)

\S4method{param_list}{parameter_class,list}(obj) <- value

\S4method{param_value}{parameter_class,character}(obj, name)

\S4method{$}{parameter_class}(x, name)

\S4method{param_value}{parameter_class,character}(obj, name) <- value

\S4method{$}{parameter_class}(x, name) <- value
}
\arguments{
\item{obj, x}{parameter_class object}

\item{name}{id of parameter}

\item{value}{value}
}
\value{
The return value varies depending on method used for this class
}
\description{
A base class in the \pkg{struct} package. Should be inherited by other
classes and not called directly.
}
\details{
The parameter class is a mechanism for providing easily accessible
slots in other classes such as methods and models. The idea is that params
(and outputs) are slots intended to be accessed by the user without the
developer needing to provide generic functions.
}
\section{Methods (by generic)}{
\itemize{
\item \code{param_obj}: a parameter as an object (if appropriate)

\item \code{param_obj<-}: set a parameter as an object

\item \code{is_param}: check if an id is valid for an object

\item \code{param_ids}: list the valid ids for an object

\item \code{param_name}: get the (long) name of a parameter by id

\item \code{param_list}: get a named list of parameter values for an
object

\item \code{param_list<-}: set parameter values for an object using a named
list

\item \code{param_value}: get the value for a parameter by id

\item \code{$}: get the value for a parameter by id

\item \code{param_value<-}: set the value for a parameter by id

\item \code{$<-}: set the value for a parameter by id
}}

\examples{
# define a new class and inherit the parameter_class
example_class = setClass(
    'example_class',                     # name of the class
    contains = 'parameter_class',          # inherit the parameter class
    slots = c(params_example = 'numeric'), # specify a parameter
    prototype = list(params_example = 10)   # initial value for parameter
)

# create an instance of the object
M = example_class()

# Methods for the parameter class can now be used on the object
param_value(M,'example') # 10

}
