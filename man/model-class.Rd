% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model_class.R
\docType{class}
\name{model-class}
\alias{model-class}
\alias{model}
\alias{model.train,model,dataset-method}
\alias{model.predict,model,dataset-method}
\alias{model.reverse,model,dataset-method}
\alias{predicted,model-method}
\alias{predicted.name,model-method}
\alias{predicted.name<-,model,character-method}
\title{model class}
\usage{
\S4method{model.train}{model,dataset}(M, D)

\S4method{model.predict}{model,dataset}(M, D)

\S4method{model.reverse}{model,dataset}(M, D)

\S4method{predicted}{model}(M)

\S4method{predicted.name}{model}(M)

\S4method{predicted.name}{model,character}(M) <- value
}
\arguments{
\item{M}{a model object}

\item{D}{a dataset object}

\item{value}{value}
}
\value{
trained model object

model object with test set results

dataset dataset object with the reverse model applied

the predicted output, as specified by predicted.name

the id of the output returned by predicted()

the modified model object
}
\description{
A class for models that can be trained/applied to datasets e.g. PCA, PLS etc.
Also used for preprocessing steps that require application to test sets.
not intended to be called directly, this class should be inherited to provide
functionality for method-specific classes.
}
\section{Methods (by generic)}{
\itemize{
\item \code{model.train}: train the model using input data

\item \code{model.predict}: apply the model to input data

\item \code{model.reverse}: reverse the model for preprocessing steps

\item \code{predicted}: get prediction output from model

\item \code{predicted.name}: get prediction output name for model

\item \code{predicted.name<-}: set prediction output from model
}}

\examples{
M = model()
D = dataset()
M = model()
M = model.train(M,D)
D = dataset()
M = model()
M = model.train(M,D)
M = model.predict(M,D)
D = dataset()
M = model()
M = model.train(M,D)
M = model.predict(M,D)
M = model.reverse(M,D)
D = dataset()
M = example_model()
M = model.train(M,D)
M = model.predict(M,D)
p = predicted(M)
M = example_model()
predicted.name(M)
M = example_model()
predicted.name(M)='result_2'
}
